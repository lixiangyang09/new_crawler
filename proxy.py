#!/usr/bin/env python
# encoding=utf8
import queue
from datetime import datetime, timedelta
from threading import Lock
import logging
from queue import Empty
import os

logger = logging.getLogger("Resources")


class Proxy:
    def __init__(self, hash_key, ip, port, proxy_type, last_verify):
        self.ip = ip  # i.e. 127.0.0.1
        self.port = port  # i.e. 5560
        self.type = proxy_type  # i.e. 'http', 'https'
        self.hash_key = hash_key  # the hash generated by utils.helper.get_hash function
        self.last_verify = last_verify  # the date string, "2017-09-21 13:32:21.121321"

    def __repr__(self):
        return self.hash_key + "," + self.ip + "," + self.port + "," + self.type + "," + self.last_verify


class ProxyService:
    # the process that story all current crawled proxies
    proxy_all = {}
    # proxies that used in current program
    proxies = queue.Queue(0)  # process.Proxy instance

    # the lock
    lock = Lock()

    @classmethod
    def update_proxy(cls, proxy_instance, last_time=None):
        if last_time is None:
            last_time = datetime.strptime(proxy_instance.last_verify, '%Y-%m-%d %H:%M:%S.%f')
        current_time = datetime.now()
        # the process can't used in two days, delete it
        if (current_time - last_time) > timedelta(days=2):
            cls.lock.acquire(blocking=True, timeout=10)
            del cls.proxy_all[proxy_instance.hash_key]
            logger.info("delete proxy: " + proxy_instance.to_string())
            cls.lock.release()
        else:
            # update process
            cls.lock.acquire(blocking=True, timeout=10)
            proxy_instance.last_verify = str(last_time)
            cls.proxy_all[proxy_instance.hash_key] = proxy_instance
            cls.lock.release()

    @classmethod
    def get(cls):
        try:
            proxy_instance = cls.proxies.get(block=True, timeout=20)
        except Empty:
            logger.warning("no available proxy resource, please reduce the crawl seeds or add proxy resource.")
            proxy_instance = None
        return proxy_instance

    @classmethod
    def put(cls, proxy_instance):
        cls.proxies.put_nowait(proxy_instance)
        with cls.lock:
            cls.proxy_all[proxy_instance.hash_key] = proxy_instance

    @classmethod
    def start(cls):
        if os.path.exists(conf.get_proxy_db_raw()):
            with open(conf.get_proxy_db_raw()) as f:  # hash, process, date
                for line in f:
                    cleaned_line = line.rstrip('\n')
                    if cleaned_line:
                        parts = cleaned_line.split(":")
                        hash_key = helper.get_hash(cleaned_line)
                        if not Resources.appeared.is_appeared(hash_key):
                            proxy_instance = Proxy(hash_key, parts[0], parts[1], "http", str(datetime.now()))
                            Resources.proxy_all[hash_key] = proxy_instance
                            Resources.proxy_use.put(proxy_instance)
                            Resources.appeared.add(hash_key)
            if not Resources.proxy_all:
                logger.warning(f"No proxy after {conf.get_proxy_db_raw()} function")
        else:
            logger.warning(f"can't find {conf.get_proxy_db_raw()} file")

        if os.path.exists(conf.get_proxy_db()):
            with open(conf.get_proxy_db()) as f:  # hash, process, date
                for line in f:
                    cleaned_line = line.rstrip('\n')
                    if cleaned_line:
                        parts = cleaned_line.split(",")
                        proxy_instance = Proxy(parts[0], parts[1], parts[2], parts[3], parts[4])
                        Resources.proxy_all[parts[0]] = proxy_instance
                        Resources.proxy_use.put(proxy_instance)
                        Resources.appeared.add(parts[0])
            if not Resources.proxy_all:
                logger.warning(f"No proxy after {conf.get_proxy_db()} function")
        else:
            logger.warning(f"can't find {conf.get_proxy_db()} file")
