#!/usr/bin/env python
# encoding=utf8
import queue
from datetime import datetime, timedelta
from threading import Lock
import logging
from queue import Empty
import os
from sync_set import SyncSet
from config import ConfigService
import util


class Proxy:
    def __init__(self, hash_key, ip, port, proxy_type, last_verify=str(datetime.now())):
        self.ip = ip  # i.e. 127.0.0.1
        self.port = port  # i.e. 5560
        self.type = proxy_type  # i.e. 'http', 'https'
        self.hash_key = hash_key  # the hash generated by utils.helper.get_hash function
        self.last_verify = last_verify  # the date string, "2017-09-21 13:32:21.121321"

    def __repr__(self):
        return str(self.hash_key) + "," + str(self.ip) + "," + str(self.port)\
               + "," + str(self.type) + "," + str(self.last_verify)


class ProxyService:
    # the process that story all current crawled proxies
    proxy_all = {}
    # proxies that used in current program
    proxies = queue.Queue(0)  # process.Proxy instance
    # already exist
    appeared = SyncSet()
    # the lock
    lock = Lock()

    logger = logging.getLogger(__name__)

    @classmethod
    def update_proxy(cls, proxy_instance, last_time=None):
        if last_time is None:
            last_time = datetime.strptime(proxy_instance.last_verify, '%Y-%m-%d %H:%M:%S.%f')
        current_time = datetime.now()
        # the process can't used in two days, delete it
        if (current_time - last_time) > timedelta(days=2):
            cls.lock.acquire(blocking=True, timeout=10)
            del cls.proxy_all[proxy_instance.hash_key]
            cls.logger.info("delete proxy: " + proxy_instance.to_string())
            cls.lock.release()
        else:
            # update process
            cls.lock.acquire(blocking=True, timeout=10)
            proxy_instance.last_verify = str(last_time)
            cls.proxy_all[proxy_instance.hash_key] = proxy_instance
            cls.lock.release()

    @classmethod
    def get(cls):
        try:
            proxy_instance = cls.proxies.get(block=True, timeout=5)
            cls.appeared.remove(proxy_instance.hash_key)
        except Empty:
            cls.logger.warning("no available proxy resource, please reduce the crawl seeds or add proxy resource.")
            proxy_instance = None
        return proxy_instance

    @classmethod
    def put(cls, proxy_instance):
        """
        put the proxy back and update the last available time
        :param proxy_instance:
        :return:
        """
        if proxy_instance is None:
            return
        if not cls.appeared.exist(proxy_instance.hash_key):
            cls.proxies.put_nowait(proxy_instance)
            with cls.lock:
                cls.proxy_all[proxy_instance.hash_key] = proxy_instance
            cls.update_proxy(proxy_instance, datetime.now())
            cls.appeared.add(proxy_instance.hash_key)

    @classmethod
    def start(cls):
        proxy_raw_count = 0
        if os.path.exists(ConfigService.get_proxy_db_raw()):
            with open(ConfigService.get_proxy_db_raw()) as f:  # hash, process, date
                for line in f:
                    cleaned_line = line.rstrip('\n')
                    if cleaned_line:
                        parts = cleaned_line.split(":")
                        hash_key = util.get_hash(cleaned_line)
                        proxy_instance = Proxy(hash_key, parts[0], parts[1], "http")
                        cls.put(proxy_instance)
                        proxy_raw_count += 1
            if not cls.proxy_all:
                cls.logger.warning(f"No proxy after {ConfigService.get_proxy_db_raw()} function")
            else:
                cls.logger.info(f"Totally load {str(proxy_raw_count)} raw proxies")
        else:
            cls.logger.warning(f"can't find {ConfigService.get_proxy_db_raw()} file")
        proxy_db_count = 0
        if os.path.exists(ConfigService.get_proxy_db()):
            with open(ConfigService.get_proxy_db()) as f:  # hash, process, date
                for line in f:
                    cleaned_line = line.rstrip('\n')
                    if cleaned_line:
                        parts = cleaned_line.split(",")
                        proxy_instance = Proxy(parts[0], parts[1], parts[2], parts[3], parts[4])
                        cls.put(proxy_instance)
                        proxy_db_count += 1
            if not cls.proxy_all:
                cls.logger.warning(f"No proxy after {ConfigService.get_proxy_db()} function")
            else:
                cls.logger.info(f"Totally load {str(proxy_db_count)} proxies from {ConfigService.get_proxy_db()}")
        else:
            cls.logger.warning(f"can't find {ConfigService.get_proxy_db()} file")

    @classmethod
    def stop(cls):
        proxy_db_count = 0
        with open(ConfigService.get_proxy_db(), 'w') as f:
            for proxy in cls.proxy_all.values():
                output = str(proxy) + "\n"
                f.write(output)
                proxy_db_count += 1
        cls.logger.info(f"Write back {str(proxy_db_count)} proxies.")

